// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  teacher
  student
  parent
}

enum UserStatus {
  active
  inactive
}

enum GradeType {
  activity
  assignment
  exam
}

enum AttendanceStatus {
  present
  absent
  excused
}

enum EventType {
  extracurricular
  meeting
  workshop
  other
}

enum AcademicYearStatus {
  active
  inactive
}

enum TeacherStatus {
  active
  inactive
}

enum SubjectStatus {
  active
  inactive
}

enum CourseStatus {
  active
  inactive
}

enum DayOfWeek {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

/// Models representing different entities in the system

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  password       String
  role           UserRole
  createdAt      DateTime       @default(now())
  status         UserStatus
  // Relationships
  student        Student?
  teacher        Teacher?
  parent         Parent?
}

model AcademicYear {
  id            Int               @id @default(autoincrement())
  name          String            @unique // e.g., "2023-2024"
  startDate     DateTime
  endDate       DateTime
  status        AcademicYearStatus
  // Relationships
  courses       Course[]
  events        Event[]
}

model Student {
  id               Int             @id @default(autoincrement())
  userId           Int             @unique
  birthDate        DateTime
  address          String
  phone            String
  enrollmentDate   DateTime
  gradeLevel       String          // e.g., "5th Grade"
  // Relationships
  user             User            @relation(fields: [userId], references: [id])
  parents          Parent[]
  attendance       Attendance[]
  grade            Grade[]
}

model Parent {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  address           String
  phone             String
  // Relationships
  user        User      @relation(fields: [userId], references: [id])
  student     Student[]
}

model Teacher {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  expertise         String    // Area of expertise
  phone             String
  address           String
  hireDate          DateTime
  status            TeacherStatus
  // Relationships
  user        User      @relation(fields: [userId], references: [id])
  class          Class[]
}

model Course {
  id             Int           @id @default(autoincrement())
  name           String        @unique // e.g., "Fifth A"
  description    String
  academicYearId Int
  gradeLevel     String        // e.g., "5th Grade"
  status         CourseStatus
  // Relationships
  academicYear   AcademicYear  @relation(fields: [academicYearId], references: [id])
  class          Class[]
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       // e.g., "Mathematics"
  description String
  status      SubjectStatus
  // Relationships
  class          Class[]
}

model Classroom {
  id          Int          @id @default(autoincrement())
  name        String
  capacity    Int
  // Relationships
  schedules  Schedule[]
}

model Schedule {
  id          Int           @id @default(autoincrement())
  classroomId Int
  classId     Int?
  eventId     Int?
  dayOfWeek   DayOfWeek        // e.g., "Monday", "Tuesday"
  startTime   String
  endTime     String
  description String
  // Relationships
  classroom   Classroom     @relation(fields: [classroomId], references: [id])
  class       Class?         @relation(fields: [classId], references: [id])
  event       Event?         @relation(fields: [eventId], references: [id])
  attendances Attendance[]
}

model Class {
  id           Int           @id @default(autoincrement())
  courseId     Int
  subjectId    Int
  teacherId    Int
  comments     String?
  // Relationships
  course       Course        @relation(fields: [courseId], references: [id])
  subject      Subject       @relation(fields: [subjectId], references: [id])
  teacher      Teacher       @relation(fields: [teacherId], references: [id])
  schedule     Schedule[]     // One class can have multiple schedules
  attendances  Attendance[]
  grades       Grade[]
}

model Attendance {
  id                Int               @id @default(autoincrement())
  studentId         Int
  classId           Int
  scheduleId        Int           // Attendance is tied to a specific schedule
  date              DateTime
  attendanceStatus  AttendanceStatus
  comments          String?
  // Relationships
  student          Student    @relation(fields: [studentId], references: [id])
  class            Class      @relation(fields: [classId], references: [id])
  schedule         Schedule   @relation(fields: [scheduleId], references: [id])
}

model Grade {
  id               Int               @id @default(autoincrement())
  studentId        Int
  classId           Int
  evaluationType   GradeType
  score            Float             // e.g., 85.5
  evaluationDate    DateTime
  description      String
  // Relationships
  student          Student           @relation(fields: [studentId], references: [id])
  class            Class             @relation(fields: [classId], references: [id])
}

model Event {
  id              Int               @id @default(autoincrement())
  academicYearId  Int
  scheduleId      Int
  title           String
  description     String
  date            DateTime
  eventType       EventType
  // Relationships
  academicYear   AcademicYear  @relation(fields: [academicYearId], references: [id])
  schedule         Schedule[]
}

model Setting {
  id          Int       @id @default(autoincrement())
  key         String    @unique // e.g., "class_start_date"
  value       String    // e.g., "2023-09-01" or "true"
  description String
}
